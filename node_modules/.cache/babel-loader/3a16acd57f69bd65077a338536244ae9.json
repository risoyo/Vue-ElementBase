{"remainingRequest":"D:\\Project\\nowcoder\\Nowcoding-vue\\node_modules\\babel-loader\\lib\\index.js!D:\\Project\\nowcoder\\Nowcoding-vue\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\Project\\nowcoder\\Nowcoding-vue\\src\\utils\\request.js","dependencies":[{"path":"D:\\Project\\nowcoder\\Nowcoding-vue\\src\\utils\\request.js","mtime":1581240032851},{"path":"D:\\Project\\nowcoder\\Nowcoding-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Project\\nowcoder\\Nowcoding-vue\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Project\\nowcoder\\Nowcoding-vue\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import axios from \"axios\"; // import { MessageBox, Message } from \"element-ui\";\n\nimport Message from \"element-ui\";\nimport router from \"../router\"; // create an axios instance\n\nvar service = axios.create({\n  baseURL: process.env.VUE_APP_BASE_API,\n  // url = base url + request url\n  // withCredentials: true, // send cookies when cross-domain requests\n  timeout: 5000 // request timeout\n\n}); // request interceptor\n\nservice.interceptors.request.use(function (config) {\n  // do something before request is sent\n  //    if (store.getters.token) {\n  //      // let each request carry token\n  //      // ['X-Token'] is a custom headers key\n  //      // please modify it according to the actual situation\n  //      config.headers['X-Token'] = getToken()\n  //    }\n  config.headers[\"Content-Type\"] = \"application/json;charset=UTF-8\"; // const token = window.sessionStorage.getItem(\"_token\");\n\n  config.headers[\"X-ER-UAT\"] = \"token\";\n  return config;\n}, function (error) {\n  // do something with request error\n  console.log(error); // for debug\n\n  return Promise.reject(error);\n}); // response interceptor\n\nservice.interceptors.response.use(\n/**\r\n * If you want to get http information such as headers or status\r\n * Please return  response => response\r\n */\n\n/**\r\n * Determine the request status by custom code\r\n * Here is just an example\r\n * You can also judge the status by HTTP Status Code\r\n */\nfunction (response) {\n  var res = response.data; // if the custom code is not 20000, it is judged as an error.\n\n  if (res.code !== 0) {\n    Message({\n      message: res.message || \"Error\",\n      type: \"error\",\n      duration: 5 * 1000\n    }); // 50008: Illegal token; 50012: Other clients logged in; 50014: Token expired;\n    //      if (res.code === 50008 || res.code === 50012 || res.code === 50014) {\n    //        // to re-login\n    //        MessageBox.confirm('You have been logged out, you can cancel to stay on this page, or log in again', 'Confirm logout', {\n    //          confirmButtonText: 'Re-Login',\n    //          cancelButtonText: 'Cancel',\n    //          type: 'warning'\n    //        }).then(() => {\n    //          store.dispatch('user/resetToken').then(() => {\n    //            location.reload()\n    //          })\n    //        })\n    //      }\n\n    return Promise.reject(new Error(res.message || \"Error\"));\n  } else {\n    return res;\n  }\n}, function (error) {\n  console.log(error); // for debug\n\n  var status = error.response.status;\n\n  if (status === 401) {\n    //登录失效 返回登录页面\n    Message({\n      message: \"登录失效，请重新登录\",\n      type: \"warning\",\n      duration: 5 * 1000\n    });\n    router.push(\"/login\");\n    return Promise.reject(error);\n  }\n\n  Message({\n    message: error.message,\n    type: \"error\",\n    duration: 5 * 1000\n  });\n  return Promise.reject(error);\n});\nexport default service;",{"version":3,"sources":["D:\\Project\\nowcoder\\Nowcoding-vue\\src\\utils\\request.js"],"names":["axios","Message","router","service","create","baseURL","process","env","VUE_APP_BASE_API","timeout","interceptors","request","use","config","headers","error","console","log","Promise","reject","response","res","data","code","message","type","duration","Error","status","push"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,MAAP,kB,CAEA;;AACA,IAAMC,OAAO,GAAGH,KAAK,CAACI,MAAN,CAAa;AAC3BC,EAAAA,OAAO,EAAEC,OAAO,CAACC,GAAR,CAAYC,gBADM;AACY;AACvC;AACAC,EAAAA,OAAO,EAAE,IAHkB,CAGb;;AAHa,CAAb,CAAhB,C,CAMA;;AACAN,OAAO,CAACO,YAAR,CAAqBC,OAArB,CAA6BC,GAA7B,CACE,UAAAC,MAAM,EAAI;AACR;AAEA;AACA;AACA;AACA;AACA;AACA;AACAA,EAAAA,MAAM,CAACC,OAAP,CAAe,cAAf,IAAiC,gCAAjC,CATQ,CAUR;;AACAD,EAAAA,MAAM,CAACC,OAAP,CAAe,UAAf,IAA6B,OAA7B;AACA,SAAOD,MAAP;AACD,CAdH,EAeE,UAAAE,KAAK,EAAI;AACP;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ,EAFO,CAEa;;AACpB,SAAOG,OAAO,CAACC,MAAR,CAAeJ,KAAf,CAAP;AACD,CAnBH,E,CAsBA;;AACAZ,OAAO,CAACO,YAAR,CAAqBU,QAArB,CAA8BR,GAA9B;AACE;;;;;AAKA;;;;;AAKA,UAAAQ,QAAQ,EAAI;AACV,MAAMC,GAAG,GAAGD,QAAQ,CAACE,IAArB,CADU,CAEV;;AACA,MAAID,GAAG,CAACE,IAAJ,KAAa,CAAjB,EAAoB;AAClBtB,IAAAA,OAAO,CAAC;AACNuB,MAAAA,OAAO,EAAEH,GAAG,CAACG,OAAJ,IAAe,OADlB;AAENC,MAAAA,IAAI,EAAE,OAFA;AAGNC,MAAAA,QAAQ,EAAE,IAAI;AAHR,KAAD,CAAP,CADkB,CAOlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,WAAOR,OAAO,CAACC,MAAR,CAAe,IAAIQ,KAAJ,CAAUN,GAAG,CAACG,OAAJ,IAAe,OAAzB,CAAf,CAAP;AACD,GArBD,MAqBO;AACL,WAAOH,GAAP;AACD;AACF,CAtCH,EAuCE,UAAAN,KAAK,EAAI;AACPC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ,EADO,CACa;;AACpB,MAAIa,MAAM,GAAGb,KAAK,CAACK,QAAN,CAAeQ,MAA5B;;AACA,MAAIA,MAAM,KAAK,GAAf,EAAoB;AAClB;AACA3B,IAAAA,OAAO,CAAC;AACNuB,MAAAA,OAAO,EAAE,YADH;AAENC,MAAAA,IAAI,EAAE,SAFA;AAGNC,MAAAA,QAAQ,EAAE,IAAI;AAHR,KAAD,CAAP;AAKAxB,IAAAA,MAAM,CAAC2B,IAAP,CAAY,QAAZ;AACA,WAAOX,OAAO,CAACC,MAAR,CAAeJ,KAAf,CAAP;AACD;;AACDd,EAAAA,OAAO,CAAC;AACNuB,IAAAA,OAAO,EAAET,KAAK,CAACS,OADT;AAENC,IAAAA,IAAI,EAAE,OAFA;AAGNC,IAAAA,QAAQ,EAAE,IAAI;AAHR,GAAD,CAAP;AAKA,SAAOR,OAAO,CAACC,MAAR,CAAeJ,KAAf,CAAP;AACD,CA1DH;AA6DA,eAAeZ,OAAf","sourcesContent":["import axios from \"axios\";\r\n// import { MessageBox, Message } from \"element-ui\";\r\nimport Message from \"element-ui\";\r\nimport router from \"../router\";\r\n\r\n// create an axios instance\r\nconst service = axios.create({\r\n  baseURL: process.env.VUE_APP_BASE_API, // url = base url + request url\r\n  // withCredentials: true, // send cookies when cross-domain requests\r\n  timeout: 5000 // request timeout\r\n});\r\n\r\n// request interceptor\r\nservice.interceptors.request.use(\r\n  config => {\r\n    // do something before request is sent\r\n\r\n    //    if (store.getters.token) {\r\n    //      // let each request carry token\r\n    //      // ['X-Token'] is a custom headers key\r\n    //      // please modify it according to the actual situation\r\n    //      config.headers['X-Token'] = getToken()\r\n    //    }\r\n    config.headers[\"Content-Type\"] = \"application/json;charset=UTF-8\";\r\n    // const token = window.sessionStorage.getItem(\"_token\");\r\n    config.headers[\"X-ER-UAT\"] = \"token\";\r\n    return config;\r\n  },\r\n  error => {\r\n    // do something with request error\r\n    console.log(error); // for debug\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// response interceptor\r\nservice.interceptors.response.use(\r\n  /**\r\n   * If you want to get http information such as headers or status\r\n   * Please return  response => response\r\n   */\r\n\r\n  /**\r\n   * Determine the request status by custom code\r\n   * Here is just an example\r\n   * You can also judge the status by HTTP Status Code\r\n   */\r\n  response => {\r\n    const res = response.data;\r\n    // if the custom code is not 20000, it is judged as an error.\r\n    if (res.code !== 0) {\r\n      Message({\r\n        message: res.message || \"Error\",\r\n        type: \"error\",\r\n        duration: 5 * 1000\r\n      });\r\n\r\n      // 50008: Illegal token; 50012: Other clients logged in; 50014: Token expired;\r\n      //      if (res.code === 50008 || res.code === 50012 || res.code === 50014) {\r\n      //        // to re-login\r\n      //        MessageBox.confirm('You have been logged out, you can cancel to stay on this page, or log in again', 'Confirm logout', {\r\n      //          confirmButtonText: 'Re-Login',\r\n      //          cancelButtonText: 'Cancel',\r\n      //          type: 'warning'\r\n      //        }).then(() => {\r\n      //          store.dispatch('user/resetToken').then(() => {\r\n      //            location.reload()\r\n      //          })\r\n      //        })\r\n      //      }\r\n      return Promise.reject(new Error(res.message || \"Error\"));\r\n    } else {\r\n      return res;\r\n    }\r\n  },\r\n  error => {\r\n    console.log(error); // for debug\r\n    let status = error.response.status;\r\n    if (status === 401) {\r\n      //登录失效 返回登录页面\r\n      Message({\r\n        message: \"登录失效，请重新登录\",\r\n        type: \"warning\",\r\n        duration: 5 * 1000\r\n      });\r\n      router.push(\"/login\");\r\n      return Promise.reject(error);\r\n    }\r\n    Message({\r\n      message: error.message,\r\n      type: \"error\",\r\n      duration: 5 * 1000\r\n    });\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default service;\r\n"]}]}