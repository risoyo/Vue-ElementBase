{"remainingRequest":"D:\\Project\\nowcoder\\Nowcoding-vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Project\\nowcoder\\Nowcoding-vue\\src\\components\\Register\\RegisterMain.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Project\\nowcoder\\Nowcoding-vue\\src\\components\\Register\\RegisterMain.vue","mtime":1581476844438},{"path":"D:\\Project\\nowcoder\\Nowcoding-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Project\\nowcoder\\Nowcoding-vue\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Project\\nowcoder\\Nowcoding-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Project\\nowcoder\\Nowcoding-vue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nexport default {\r\n  data() {\r\n    var validatePass = (rule, value, callback) => {\r\n      if (value === \"\") {\r\n        callback(new Error(\"请输入密码\"));\r\n      } else {\r\n        if (this.ruleForm.checkPass !== \"\") {\r\n          this.$refs.ruleForm.validateField(\"checkPass\");\r\n        }\r\n        callback();\r\n      }\r\n    };\r\n    var validatePass2 = (rule, value, callback) => {\r\n      if (value === \"\") {\r\n        callback(new Error(\"请再次输入密码\"));\r\n      } else if (value !== this.ruleForm.pass) {\r\n        callback(new Error(\"两次输入密码不一致!\"));\r\n      } else {\r\n        callback();\r\n      }\r\n    };\r\n    var checkEmail = (rule, value, callback) => {\r\n      if (!value) {\r\n        callback(new Error(\"请输入邮箱\"));\r\n      } else {\r\n        callback();\r\n      }\r\n    };\r\n    return {\r\n      ruleForm: {\r\n        name: \"\",\r\n        pass: \"\",\r\n        checkPass: \"\",\r\n        email: \"\",\r\n        verifyCode: \"\"\r\n      },\r\n      rules: {\r\n        pass: [{ validator: validatePass, trigger: \"blur\" }],\r\n        checkPass: [{ validator: validatePass2, trigger: \"blur\" }],\r\n        email: [{ validator: checkEmail, trigger: \"blur\" }]\r\n      }\r\n    };\r\n  },\r\n  methods: {\r\n    submitForm(formName) {\r\n      this.$refs[formName].validate(valid => {\r\n        if (valid) {\r\n          console.log(\"form is:\" + JSON.stringify(this.ruleForm));\r\n          // 指定访问的URL\r\n          let url = \"/community/alpha/student\";\r\n          this.$axios({\r\n            // 指定POST方法\r\n            method: \"POST\",\r\n            // 指定数据格式\r\n            dataType: \"json\",\r\n            // 指定访问的URL\r\n            url: url,\r\n            // 指定header\r\n            headers: {\r\n              \"Content-Type\": \"application/json;charset=UTF-8\"\r\n            },\r\n            // 将data中的form存入axios.POST请求的数据节点中\r\n            data: JSON.stringify(this.ruleForm)\r\n            // then->接收返回响应\r\n          })\r\n            .then(function (res) {\r\n              console.log(res);\r\n              // 将响应res打印出来\r\n              console.log(JSON.stringify(res.data.code));\r\n            })\r\n            .catch(function (err) {\r\n              console.log(err);\r\n            });\r\n        } else {\r\n          this.$message({\r\n            message: \"请完善信息\",\r\n            type: \"error\"\r\n          });\r\n          return false;\r\n        }\r\n      });\r\n    },\r\n    SendVerifyCode() {\r\n      var vm = this; //在axios的then方法中this会失效，此处使用vm保存this指针\r\n      console.log(\"send code to \" + this.ruleForm.email);\r\n      // 指定访问的URL\r\n      let url = \"/community/getVerifyCode\";\r\n      this.emailVerify.email = this.ruleForm.email;\r\n      this.$axios({\r\n        // 指定POST方法\r\n        method: \"POST\",\r\n        // 指定数据格式\r\n        dataType: \"json\",\r\n        // 指定访问的URL\r\n        url: url,\r\n        // 指定header\r\n        headers: {\r\n          \"Content-Type\": \"application/json;charset=UTF-8\"\r\n        },\r\n        // 将data中的form存入axios.POST请求的数据节点中\r\n        data: JSON.stringify(this.emailVerify)\r\n        // then->接收返回响应\r\n      })\r\n        .then(function (res) {\r\n          console.log(res);\r\n          // 将响应res打印出来\r\n          console.log(JSON.stringify(res.data.reason));\r\n          let status = \"\"; //使用status来控制$Message的提示类型\r\n          if (JSON.stringify(res.data.status) === \"1\") {\r\n            status = \"error\"; //响应码为1，提示类型为错误\r\n          } else {\r\n            status = \"success\"; //响应码为0，提示类型为成功\r\n          }\r\n          vm.$message({\r\n            message: JSON.stringify(res.data.reason), //取后台返回的响应信息\r\n            type: status //指定响应类型\r\n          });\r\n        })\r\n        .catch(function (err) {\r\n          console.log(err);\r\n          vm.$message({\r\n            message: err, //取后台返回的响应信息\r\n            type: \"error\" //指定响应类型\r\n          });\r\n        });\r\n    },\r\n    resetForm(formName) {\r\n      this.$refs[formName].resetFields();\r\n    }\r\n  }\r\n};\r\n",{"version":3,"sources":["RegisterMain.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyfile":"RegisterMain.vue","sourceRoot":"src/components/Register","sourcesContent":["<template>\r\n  <div>\r\n    <!-- 注册页页头 -->\r\n    <h1 class=\"register-header\">注册</h1>\r\n    <el-divider></el-divider>\r\n    <!-- 使用element-ui的表单来实现注册页主体 -->\r\n    <div class=\"register-form\">\r\n      <el-form\r\n        :model=\"ruleForm\"\r\n        status-icon\r\n        :rules=\"rules\"\r\n        ref=\"ruleForm\"\r\n        label-width=\"100px\"\r\n        class=\"demo-ruleForm\"\r\n      >\r\n        <el-form-item label=\"用户名\" prop=\"name\">\r\n          <el-input v-model=\"ruleForm.name\" autocomplete=\"off\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"密码\" prop=\"pass\">\r\n          <el-input type=\"password\" v-model=\"ruleForm.pass\" autocomplete=\"off\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"确认密码\" prop=\"checkPass\">\r\n          <el-input type=\"password\" v-model=\"ruleForm.checkPass\" autocomplete=\"off\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"邮箱\" prop=\"email\">\r\n          <el-input v-model.number=\"ruleForm.email\"></el-input>\r\n          <el-button :plain=\"true\" @click=\"SendVerifyCode\">发送验证码</el-button>\r\n        </el-form-item>\r\n        <el-form-item label=\"验证码\" prop=\"verifyCode\">\r\n          <el-input v-model.number=\"ruleForm.verifyCode\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item>\r\n          <el-button type=\"primary\" @click=\"submitForm('ruleForm')\">提交</el-button>\r\n          <el-button @click=\"resetForm('ruleForm')\">重置</el-button>\r\n        </el-form-item>\r\n      </el-form>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    var validatePass = (rule, value, callback) => {\r\n      if (value === \"\") {\r\n        callback(new Error(\"请输入密码\"));\r\n      } else {\r\n        if (this.ruleForm.checkPass !== \"\") {\r\n          this.$refs.ruleForm.validateField(\"checkPass\");\r\n        }\r\n        callback();\r\n      }\r\n    };\r\n    var validatePass2 = (rule, value, callback) => {\r\n      if (value === \"\") {\r\n        callback(new Error(\"请再次输入密码\"));\r\n      } else if (value !== this.ruleForm.pass) {\r\n        callback(new Error(\"两次输入密码不一致!\"));\r\n      } else {\r\n        callback();\r\n      }\r\n    };\r\n    var checkEmail = (rule, value, callback) => {\r\n      if (!value) {\r\n        callback(new Error(\"请输入邮箱\"));\r\n      } else {\r\n        callback();\r\n      }\r\n    };\r\n    return {\r\n      ruleForm: {\r\n        name: \"\",\r\n        pass: \"\",\r\n        checkPass: \"\",\r\n        email: \"\",\r\n        verifyCode: \"\"\r\n      },\r\n      rules: {\r\n        pass: [{ validator: validatePass, trigger: \"blur\" }],\r\n        checkPass: [{ validator: validatePass2, trigger: \"blur\" }],\r\n        email: [{ validator: checkEmail, trigger: \"blur\" }]\r\n      }\r\n    };\r\n  },\r\n  methods: {\r\n    submitForm(formName) {\r\n      this.$refs[formName].validate(valid => {\r\n        if (valid) {\r\n          console.log(\"form is:\" + JSON.stringify(this.ruleForm));\r\n          // 指定访问的URL\r\n          let url = \"/community/alpha/student\";\r\n          this.$axios({\r\n            // 指定POST方法\r\n            method: \"POST\",\r\n            // 指定数据格式\r\n            dataType: \"json\",\r\n            // 指定访问的URL\r\n            url: url,\r\n            // 指定header\r\n            headers: {\r\n              \"Content-Type\": \"application/json;charset=UTF-8\"\r\n            },\r\n            // 将data中的form存入axios.POST请求的数据节点中\r\n            data: JSON.stringify(this.ruleForm)\r\n            // then->接收返回响应\r\n          })\r\n            .then(function (res) {\r\n              console.log(res);\r\n              // 将响应res打印出来\r\n              console.log(JSON.stringify(res.data.code));\r\n            })\r\n            .catch(function (err) {\r\n              console.log(err);\r\n            });\r\n        } else {\r\n          this.$message({\r\n            message: \"请完善信息\",\r\n            type: \"error\"\r\n          });\r\n          return false;\r\n        }\r\n      });\r\n    },\r\n    SendVerifyCode() {\r\n      var vm = this; //在axios的then方法中this会失效，此处使用vm保存this指针\r\n      console.log(\"send code to \" + this.ruleForm.email);\r\n      // 指定访问的URL\r\n      let url = \"/community/getVerifyCode\";\r\n      this.emailVerify.email = this.ruleForm.email;\r\n      this.$axios({\r\n        // 指定POST方法\r\n        method: \"POST\",\r\n        // 指定数据格式\r\n        dataType: \"json\",\r\n        // 指定访问的URL\r\n        url: url,\r\n        // 指定header\r\n        headers: {\r\n          \"Content-Type\": \"application/json;charset=UTF-8\"\r\n        },\r\n        // 将data中的form存入axios.POST请求的数据节点中\r\n        data: JSON.stringify(this.emailVerify)\r\n        // then->接收返回响应\r\n      })\r\n        .then(function (res) {\r\n          console.log(res);\r\n          // 将响应res打印出来\r\n          console.log(JSON.stringify(res.data.reason));\r\n          let status = \"\"; //使用status来控制$Message的提示类型\r\n          if (JSON.stringify(res.data.status) === \"1\") {\r\n            status = \"error\"; //响应码为1，提示类型为错误\r\n          } else {\r\n            status = \"success\"; //响应码为0，提示类型为成功\r\n          }\r\n          vm.$message({\r\n            message: JSON.stringify(res.data.reason), //取后台返回的响应信息\r\n            type: status //指定响应类型\r\n          });\r\n        })\r\n        .catch(function (err) {\r\n          console.log(err);\r\n          vm.$message({\r\n            message: err, //取后台返回的响应信息\r\n            type: \"error\" //指定响应类型\r\n          });\r\n        });\r\n    },\r\n    resetForm(formName) {\r\n      this.$refs[formName].resetFields();\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n.register-header {\r\n  text-align: center;\r\n  font-size: 30px;\r\n  color: rgb(48, 214, 214);\r\n}\r\n.register-form {\r\n  padding-left: 350px;\r\n  padding-right: 350px;\r\n}\r\n</style>\r\n"]}]}